/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ipcalculator;
        
import java.util.*; 
import java.io.*; 
import java.net.*; 
import java.lang.Math; 
import javax.swing.JOptionPane;
/**
 *
 * @author Asus
 */
public class calculator extends javax.swing.JFrame {

    
    /**
     * Creates new form calculator
     */
    public calculator() {
        initComponents();
        
    }
    
      public static int[] bina(String[] str) 
    { 
        int re[] = new int[32]; 
        int a, b, c, d, i, rem; 
        a = b = c = d = 1; 
        Stack<Integer> st = new Stack<Integer>(); 
          
        // Separate each number of the IP address 
        if (str != null)  
        { 
            a = Integer.parseInt(str[0]); 
            b = Integer.parseInt(str[1]); 
            c = Integer.parseInt(str[2]); 
            d = Integer.parseInt(str[3]); 
        } 
          
        // convert first number to binary 
        for (i = 0; i <= 7; i++)  
        { 
            rem = a % 2; 
            st.push(rem); 
            a = a / 2; 
        } 
          
        // Obtain First octet 
        for (i = 0; i <= 7; i++) { 
            re[i] = st.pop(); 
        } 
          
        // convert second number to binary 
        for (i = 8; i <= 15; i++) { 
            rem = b % 2; 
            st.push(rem); 
            b = b / 2; 
        } 
          
        // Obtain Second octet 
        for (i = 8; i <= 15; i++) { 
            re[i] = st.pop(); 
        } 
          
        // convert Third number to binary 
        for (i = 16; i <= 23; i++) { 
            rem = c % 2; 
            st.push(rem); 
            c = c / 2; 
        } 
          
        // Obtain Third octet 
        for (i = 16; i <= 23; i++) { 
            re[i] = st.pop(); 
        } 
          
        // convert fourth number to binary 
        for (i = 24; i <= 31; i++) { 
            rem = d % 2; 
            st.push(rem); 
            d = d / 2; 
        } 
          
        // Obtain Fourth octet 
        for (i = 24; i <= 31; i++) { 
            re[i] = st.pop(); 
        } 
          
        return (re); 
    } 
      
    // cls returns class of given IP address 
    public static String cls(String[] str) 
    { 
        int a = Integer.parseInt(str[0]); 
        if (a >= 0 && a <= 127) 
            return ("A"); 
        else if (a >= 128 && a <= 191) 
            return ("B"); 
        else if (a >= 192 && a <= 223) 
            return ("C"); 
        else if (a >= 224 && a <= 239) 
            return ("D"); 
        else
            return ("E"); 
    } 
      
    // Converts IP address  
    // from binary to decimal form 
    public static int[] deci(int[] bi) 
    { 
          
        int[] arr = new int[4]; 
        int a, b, c, d, i, j; 
        a = b = c = d = 0; 
        j = 7; 
          
        for (i = 0; i < 8; i++) { 
              
            a = a + (int)(Math.pow(2, j)) * bi[i]; 
            j--; 
        } 
          
        j = 7; 
        for (i = 8; i < 16; i++) { 
              
            b = b + bi[i] * (int)(Math.pow(2, j)); 
            j--; 
        } 
          
        j = 7; 
        for (i = 16; i < 24; i++) { 
              
            c = c + bi[i] * (int)(Math.pow(2, j)); 
            j--; 
        } 
          
        j = 7; 
        for (i = 24; i < 32; i++) { 
              
            d = d + bi[i] * (int)(Math.pow(2, j)); 
            j--; 
        } 
          
        arr[0] = a; 
        arr[1] = b; 
        arr[2] = c; 
        arr[3] = d; 
        return arr; 
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        iplabel = new javax.swing.JTextField();
        subnetlabel = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        calculatebutton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtiprange = new javax.swing.JTextArea();
        txtsegment = new javax.swing.JLabel();
        txtnetmask = new javax.swing.JLabel();
        txtminhost = new javax.swing.JLabel();
        txtmaxhost = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtclass = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtnetaddress = new javax.swing.JLabel();
        txtbcaddress = new javax.swing.JLabel();

        jLabel12.setText("jLabel12");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Tugas 1");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Input Ip Address");

        iplabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iplabelActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("/");

        calculatebutton.setText("Calculate");
        calculatebutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calculatebuttonMouseClicked(evt);
            }
        });
        calculatebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculatebuttonActionPerformed(evt);
            }
        });

        jLabel4.setText("Subnet Mask : ");

        jLabel5.setText("Min Host : ");

        jLabel6.setText("Max Host : ");

        jLabel8.setText("Segment : ");

        txtiprange.setColumns(20);
        txtiprange.setRows(5);
        jScrollPane2.setViewportView(txtiprange);

        jLabel9.setText("Class : ");

        txtclass.setText("    ");

        jLabel10.setText("Network Address : ");

        jLabel11.setText("Broadcast Address : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtnetmask, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtbcaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtsegment, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtnetaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(79, 79, 79))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(iplabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subnetlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)))))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtmaxhost, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtminhost, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtclass, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(calculatebutton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iplabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subnetlabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(calculatebutton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtsegment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtclass)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtnetmask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txtminhost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtmaxhost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtnetaddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtbcaddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iplabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iplabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iplabelActionPerformed

    private void calculatebuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calculatebuttonMouseClicked

    }//GEN-LAST:event_calculatebuttonMouseClicked
  
    private void calculatebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculatebuttonActionPerformed
       int i; 
       String range = "";
        String[] str = new String[4]; 
        String ipr = iplabel.getText();
        String netmask = subnetlabel.getText();
  
        // You can take user input here  
        // instead of using default address 
        // Ask user to enter IP address of form(x.y.z.t/n) 
          
          
        // Split IP address into 4 subparts x, y, z, t 
        str = ipr.split("\\.");
        try{
        int[] b = new int[32]; 
          
        // Convert IP address to binary form 
        b = bina(str);  
  
        int n = Integer.parseInt(netmask); 
        int[] ntwk = new int[32]; 
        int[] brd = new int[32]; 
        int t = 32 - n; 
          
        // Obtanining network address 
        for (i = 0; i <= (31 - t); i++) { 
              
            ntwk[i] = b[i]; 
            brd[i] = b[i]; 
        } 
          
        // Set 32-n bits to 0 
        for (i = 31; i > (31 - t); i--) { 
              
            ntwk[i] = 0; 
        } 
          
        // Obtaining Broadcast address  
        // by setting 32-n bits to 1 
        for (i = 31; i > (31 - t); i--) { 
              
            brd[i] = 1; 
        }
  
        // Obtaining class of Address 
        String c = cls(str);  
        txtclass.setText(c);
          
        // Converting network address to decimal 
        int[] nt = deci(ntwk);  
          
        // Converting broadcast address to decimal 
        int[] br = deci(brd);  
        
        //print segment
        txtsegment.setText(netmask);
        
        //print subnet
        int net = Integer.parseInt(subnetlabel.getText().toString());
       
       switch(net){
           case 1: txtnetmask.setText("128.0.0.0"); break;
           case 2: txtnetmask.setText("192.0.0.0"); break;
           case 3: txtnetmask.setText("224.0.0.0"); break;
           case 4: txtnetmask.setText("240.0.0.0"); break;
           case 5: txtnetmask.setText("248.0.0.0"); break;
           case 6: txtnetmask.setText("252.0.0.0"); break;
           case 7: txtnetmask.setText("254.0.0.0"); break;
           case 8: txtnetmask.setText("255.0.0.0"); break;
           case 9: txtnetmask.setText("255.128.0.0"); break;
           case 10: txtnetmask.setText("255.192.0.0"); break;
           case 11: txtnetmask.setText("255.224.0.0"); break;
           case 12: txtnetmask.setText("255.240.0.0"); break;
           case 13: txtnetmask.setText("255.248.0.0"); break;
           case 14: txtnetmask.setText("255.252.0.0"); break;
           case 15: txtnetmask.setText("255.254.0.0"); break;
           case 16: txtnetmask.setText("255.255.0.0"); break;
           case 17: txtnetmask.setText("255.255.128.0"); break;
           case 18: txtnetmask.setText("255.255.192.0"); break;
           case 19: txtnetmask.setText("255.255.224.0"); break;
           case 20: txtnetmask.setText("255.255.240.0"); break;
           case 21: txtnetmask.setText("255.255.248.0"); break;
           case 22: txtnetmask.setText("255.255.252.0"); break;
           case 23: txtnetmask.setText("255.255.254.0"); break;
           case 24: txtnetmask.setText("255.255.255.0"); break;
           case 25: txtnetmask.setText("255.255.255.128"); break;
           case 26: txtnetmask.setText("255.255.255.192"); break;
           case 27: txtnetmask.setText("255.255.255.224"); break;
           case 28: txtnetmask.setText("255.255.255.240"); break;
           case 29: txtnetmask.setText("255.255.255.248"); break;
           case 30: txtnetmask.setText("255.255.255.252"); break;
           case 31: txtnetmask.setText("255.255.255.254"); break;
           case 32: txtnetmask.setText("255.255.255.255"); break;
               
           default: txtnetmask.setText("Invalid");
       } 
        
           // Printing network address 
        txtnetaddress.setText(nt[0] + "." + nt[1] + "." + nt[2] + "." + nt[3]);  
          
        // Printing broadcast address 
        txtbcaddress.setText(br[0] + "." + br[1] + "." + br[2] + "." + br[3]); 
        
        //printing host min
        txtminhost.setText(nt[0] + "." + nt[1] + "." + nt[2] + "." + "1");
        
        //Printing host max
        txtmaxhost.setText(br[0] + "." + br[1] + "." + br[2] + "." + (br[3]-1));
        
        //printing ip range
        for(i = 1; i <= (br[3]-1); i++){
            range += String.valueOf(nt[0] + "." + nt[1] + "." + nt[2] + "." + i) + "\n";
        }
        txtiprange.setText("IP RANGE : " + "\n" + range); 
        }catch(Exception E){
            JOptionPane.showMessageDialog(null, "Invalid IP Address");
        }
        

    }//GEN-LAST:event_calculatebuttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculatebutton;
    private javax.swing.JTextField iplabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField subnetlabel;
    private javax.swing.JLabel txtbcaddress;
    private javax.swing.JLabel txtclass;
    private javax.swing.JTextArea txtiprange;
    private javax.swing.JLabel txtmaxhost;
    private javax.swing.JLabel txtminhost;
    private javax.swing.JLabel txtnetaddress;
    private javax.swing.JLabel txtnetmask;
    private javax.swing.JLabel txtsegment;
    // End of variables declaration//GEN-END:variables
}
